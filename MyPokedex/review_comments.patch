Subject: [PATCH] review comments
---
Index: MyPokedex/src/api/PokeApiLinks.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyPokedex/src/api/PokeApiLinks.ts b/MyPokedex/src/api/PokeApiLinks.ts
--- a/MyPokedex/src/api/PokeApiLinks.ts	(revision fdcfce1e58a58246e5f562f97f7dffdea3e26740)
+++ b/MyPokedex/src/api/PokeApiLinks.ts	(revision af10840b527d7388b4548be5f753cd456251309e)
@@ -1,3 +1,6 @@
+// TODO: .env file
+
+
 export const apilink =  "https://pokeapi.co/api/v2/pokemon"
 export const api_desc_link = "https://pokeapi.co/api/v2/pokemon-species"
 export const server_api_link = "http://localhost:5000/api/favourites"
\ No newline at end of file
Index: MyPokedex/src/api/fetchFromAPI.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyPokedex/src/api/fetchFromAPI.ts b/MyPokedex/src/api/fetchFromAPI.ts
--- a/MyPokedex/src/api/fetchFromAPI.ts	(revision fdcfce1e58a58246e5f562f97f7dffdea3e26740)
+++ b/MyPokedex/src/api/fetchFromAPI.ts	(revision af10840b527d7388b4548be5f753cd456251309e)
@@ -6,6 +6,8 @@
     name: string;
     sprite: string;
 }
+
+// TODO: Should just return something
 export const fetchFromAPI = async (setFavePokemon: React.Dispatch<React.SetStateAction<pokemon[] | null>>) => {
     try {
         const response = await fetch(server_api_link);
@@ -22,6 +24,8 @@
         toast.error(error +" Unexpected error on fetching pokemon ");
     }
 }
+
+// TODO: Should just return something
 export const askServerForFavePomemon = async (setAddedPokemon : React.Dispatch<React.SetStateAction<number[]>>) => {
     try {
         const response = await fetch(server_api_link);
Index: MyPokedex/src/api/fetchFromPokeAPI.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyPokedex/src/api/fetchFromPokeAPI.ts b/MyPokedex/src/api/fetchFromPokeAPI.ts
--- a/MyPokedex/src/api/fetchFromPokeAPI.ts	(revision fdcfce1e58a58246e5f562f97f7dffdea3e26740)
+++ b/MyPokedex/src/api/fetchFromPokeAPI.ts	(revision af10840b527d7388b4548be5f753cd456251309e)
@@ -1,10 +1,28 @@
 import toast from "react-hot-toast";
 import { apilink, server_api_link, api_desc_link } from "./PokeApiLinks";
 
+
+export type PokemonsData = {
+    [key: number]: Pokemon
+}
+
+// PokemonData[1]
+export type PokemonDataIndexes = number[];
+
+// [1, 2, 3, 4, 5, 6, 7]
+
+// {150: {name: 'Mewtwo', url: '...', sprites: [], id: 150 }
+
+// TODO: We need to rethink the structure of pokemon data
 // Define the structure of a single Pokémon
 export interface Pokemon {
   name: string;
   url: string;
+  sprites: {
+      front: string;
+      back: string;
+  },
+    id: number;
 }
 
 export interface apiProps {
@@ -19,27 +37,31 @@
 }
 
 //Fetching from PokeAPI the pokemon sprites
-export const getPokemonSprite = async (num: number, setspriteData: React.Dispatch<React.SetStateAction<spriteProps | null>>, spriteDataMap: Map<number, spriteProps>, setSpriteDataMap: React.Dispatch<React.SetStateAction<Map<number, spriteProps>>> ) => {
+export const getPokemonSprite = async (id: number, setspriteData: React.Dispatch<React.SetStateAction<spriteProps | null>>, spriteDataMap: Map<number, spriteProps>, setSpriteDataMap: React.Dispatch<React.SetStateAction<Map<number, spriteProps>>> ) => {
     try{
           
           
-          const response =  await fetch(`${apilink}/${num}`);
+          const response =  await fetch(`${apilink}/${id}`);
           const pokemonSprite = await response.json();
 
           // For testing purposes
           const PokemonSprites = {
-            front_sprite: pokemonSprite["sprites"]["front_default"] as string,
-            back_sprite: pokemonSprite["sprites"]["back_default"] as string,
+              id,
+            front: pokemonSprite["sprites"]["front_default"] as string,
+            back: pokemonSprite["sprites"]["back_default"] as string,
           }
+
+          return PokemonSprites
+
+          // TODO: let's talk about the spriteDataMap
             // Update the map with the sprite data
-          spriteDataMap.set(num, PokemonSprites);
-
-          // Update the state (force re-render if needed)
-          setSpriteDataMap(new Map(spriteDataMap));
-
-          console.log(pokemonSprite["sprites"]["front_default"]);
-          console.log(pokemonSprite["sprites"]["back_default"] as string);
-          setspriteData(PokemonSprites);
+          // spriteDataMap.set(num, PokemonSprites)
+          // // Update the state (force re-render if needed)
+          // setSpriteDataMap(new Map(spriteDataMap));
+          //
+          // console.log(pokemonSprite["sprites"]["front_default"]);
+          // console.log(pokemonSprite["sprites"]["back_default"] as string);
+          // setspriteData(PokemonSprites);
           
       }
       catch(error)
@@ -47,31 +69,37 @@
         toast.error(error + " something went wrong");
       }
   }
+
+//   TODO: Should just return something. Then manage the return value in react in any way you want
 //Fetching from PokeAPI the pokemon info 
 export const fetchDataFromApi = async (number: number, setApiData: React.Dispatch<React.SetStateAction<apiProps | null>>, apiData: apiProps | null, counter: number, setSpriteData: React.Dispatch<React.SetStateAction<spriteProps | null>>, spriteDataMap: Map<number, spriteProps>, setSpriteDataMap : React.Dispatch<React.SetStateAction<Map<number, spriteProps>>>) => {
         try {
+          //TODO: Unnecessary check
           if(apiData) return;
           const response = await fetch(apilink + `?offset=${number}&limit=${counter}`)
           const PokeData = await response.json();
           
           // Loop through each Pokémon and extract the ID from the URL
           
-          PokeData.results.forEach((pokemon: Pokemon) => {
+          // PokeData.results.forEach((pokemon: Pokemon) => {
           // Extract the ID from the URL (assuming it's always the 6th part of the URL)
-          const urlParts = pokemon.url.split('/');
-          const pokemonId = parseInt(urlParts[6]);  // The ID is always at index 6
+          // const urlParts = pokemon.url.split('/');
+          // const pokemonId = parseInt(urlParts[6]);  // The ID is always at index 6
+          //
+          // // Call getPokemonSprites to fetch the sprite data for this Pokémon
+          // getPokemonSprite(pokemonId, setSpriteData, spriteDataMap, setSpriteDataMap);
 
-          // Call getPokemonSprites to fetch the sprite data for this Pokémon
-          getPokemonSprite(pokemonId, setSpriteData, spriteDataMap, setSpriteDataMap);
-        });          
+        // });
+              return PokeData.results;
           // For testing purposes
-          const pokemon = {
-           results : PokeData?.results,
-        };  
-         
-          setApiData(pokemon);
-          console.log(apiData);
-          console.log(PokeData);
+        //   const pokemon = {
+        //    results : PokeData?.results,
+        // };
+
+        //   // TODO: Do you really need 2 different states for sprites and data?
+        //   setApiData(pokemon);
+        //   console.log(apiData);
+        //   console.log(PokeData);
         }
         catch (error)
         {
Index: MyPokedex/src/components/PokeInfo.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyPokedex/src/components/PokeInfo.tsx b/MyPokedex/src/components/PokeInfo.tsx
--- a/MyPokedex/src/components/PokeInfo.tsx	(revision fdcfce1e58a58246e5f562f97f7dffdea3e26740)
+++ b/MyPokedex/src/components/PokeInfo.tsx	(revision af10840b527d7388b4548be5f753cd456251309e)
@@ -82,6 +82,7 @@
                     </Box>
 
                 </Card>
+            {/*    TODO: Just a link is fine. Or use the link as the `component` prop of `Button` */}
             <Button className='Routing-button' sx = {{m: 2, backgroundColor: 'black'}} variant="text"><Link style = {{height: 24}} to="/"><KeyboardBackspaceIcon style={{color: 'white'}}/></Link> </Button> </>) : (<Skeleton animation="wave" variant="rectangular" width={299.26} height={372.84} sx = {{ borderRadius: '8%', m: 'auto', boxShadow: 3}} />)}
            
         </>
Index: MyPokedex/src/components/PokemonList.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyPokedex/src/components/PokemonList.tsx b/MyPokedex/src/components/PokemonList.tsx
--- a/MyPokedex/src/components/PokemonList.tsx	(revision fdcfce1e58a58246e5f562f97f7dffdea3e26740)
+++ b/MyPokedex/src/components/PokemonList.tsx	(revision af10840b527d7388b4548be5f753cd456251309e)
@@ -1,6 +1,13 @@
-import React from 'react'
+import React, {useState} from 'react'
 import { Link } from 'react-router-dom';
-import { fetchDataFromApi, addToFavourites, apiProps, spriteProps, Pokemon } from '../api/fetchFromPokeAPI';
+import {
+    fetchDataFromApi,
+    addToFavourites,
+    apiProps,
+    spriteProps,
+    Pokemon,
+    getPokemonSprite
+} from '../api/fetchFromPokeAPI';
 import SearchBar from './SearchBar';
 import Box from '@mui/material/Box';
 import List from '@mui/material/List';
@@ -21,20 +28,62 @@
 
 
 const PokemonList = () => {
-  
+
+    const [pokemonData, setPokemonData] = useState<{dictionary: {[key: number]: Pokemon}, orderList: number[]}>({dictionary: {}, orderList: []});
+
+
+    const [filteredPokemon, setFilteredPokemon] = useState<Pokemon[]>([]);
+
+
     const [apiData, setApiData] = React.useState<apiProps | null>(null);
     const [spriteData, setspriteData] = React.useState<spriteProps | null>(null);
+    // TODO: What is the counter?
     const [counter, setCounter] = React.useState<number>(0);
+    // TODO: Give this a more descriptive name
     const [addedPokemon, setAddedPokemon ] = React.useState<number[]>([]);
     const SearchAPIData = apiData || {results: []};
     const [spriteDataMap, setSpriteDataMap] = React.useState<Map<number, spriteProps>>(new Map());  
-    const [ filteredPokemon, setFilteredPokemon ] = React.useState<Pokemon[]>([]);
     const [filterOffset, setFilterOffset] = React.useState<number>(0);
   
 
     const initializeData = React.useCallback(async () => {
-    
-      await fetchDataFromApi(0, setApiData, apiData, 151, setspriteData, spriteDataMap, setSpriteDataMap);
+
+     const data =  await fetchDataFromApi(0, setApiData, apiData, 151, setspriteData, spriteDataMap, setSpriteDataMap);
+
+     const pokemonData = data.reduce((accumulator, pokemon: Pokemon) => {
+           const urlParts = pokemon.url.split('/');
+          const pokemonId = parseInt(urlParts[6]);  // The ID is always at index 6
+
+         accumulator.dictionary[pokemonId] = {...pokemon, id: pokemonId, sprites: {front: '', back: ''}};
+         accumulator.orderList.push(pokemonId)
+
+         return accumulator;
+     }, {dictionary: {}, orderList: []})
+
+
+
+
+    const spritePromises = pokemonData.orderList.map(async (id: number) => {
+          // Call getPokemonSprites to fetch the sprite data for this Pokémon
+          return getPokemonSprite(pokemonId, setSpriteData, spriteDataMap, setSpriteDataMap);
+
+          // pokemonData.dictionary[id].sprites = sprites
+         //
+         // setPokemonData((prev) => {
+         //     return {...prev, dictionary: {...pokemonData.dictionary, sprites: sprites}}
+         // })
+
+        });
+
+    const spritesList = await Promise.all(spritePromises)
+
+    spritesList.forEach(spriteData => {
+        pokemonData.dictionary[spriteData.id].sprites.front = spriteData.front;
+        pokemonData.dictionary[spriteData.id].sprites.back = spriteData.back;
+    })
+
+     setPokemonData(pokemonData)
+        setFilteredPokemon(pokemonData.orderList)
       
     },[apiData, spriteDataMap]);
 
@@ -65,6 +114,7 @@
     console.log(filterOffset);
     
 
+  // TODO: Ideally, search should be global
   const handleDataFromSearchBar = (searchBarData: (Pokemon & { id: number; name?: string ;sprite?: spriteProps })[]) => {
       setFilteredPokemon(searchBarData);
       setFilterOffset(0); 
@@ -98,7 +148,22 @@
         <nav aria-label="main mailbox folders"></nav>
         <Box sx = {{flexGrow: 1}}>
           <Grid container spacing={1} sx = {{m: 1.5, justifyContent: 'center'}}>
-              <SearchBar apiData = {SearchAPIData} spriteDataMap={spriteDataMap} onPokemonData={handleDataFromSearchBar}/>
+              <SearchBar singleMatchId={filteredPokemon.length === 1 ? filteredPokemon[0].id : undefined} onChange={(value) => {
+              // do checks on value
+
+                  const newFilteredData = pokemonData.orderList.filter(id => {
+                      const pokemon = pokemonData.dictionary[id];
+
+                  //     check if value matches pokemon name
+
+                  //     return true or false
+                  }).map(id => {
+                      return pokemonData.dictionary[id];
+                  })
+
+                  setFilteredPokemon(newFilteredData)
+
+              }}/>
               {(addedPokemon.length !== 0) ? (
                 <IconButton className='no-hover' sx = {{borderRadius: '5px', backgroundColor: 'black', p: '5px',}}><Link to={'/Favourites'} style={{height: 24}}><FavoriteIcon  style = {{color: "red" }}/></Link></IconButton>
                 ) : (<IconButton className='no-hover' sx = {{borderRadius: '5px', p: '5px', backgroundColor: 'black'}}><FavoriteIcon style={{color: "white"}}  /></IconButton>)
@@ -117,7 +182,8 @@
                       {(apiData?.results && filteredPokemon.length > 0 ? filteredPokemon : apiData?.results || [])
                         .slice(counter, counter + 12) 
                         .map((info, index) => {
-                          const pokemonId = filteredPokemon.length > 0 
+                          const pokemonId = filteredPokemon.length > 0
+                            //   TODO: This logic shows up a lot, maybe it's a sign it needs to be centralized
                             ? parseInt(filteredPokemon[counter + index].url.split("/")[6],10) 
                             : parseInt(info.url.split("/")[6],10);
 
Index: MyPokedex/src/components/SearchBar.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MyPokedex/src/components/SearchBar.tsx b/MyPokedex/src/components/SearchBar.tsx
--- a/MyPokedex/src/components/SearchBar.tsx	(revision fdcfce1e58a58246e5f562f97f7dffdea3e26740)
+++ b/MyPokedex/src/components/SearchBar.tsx	(revision af10840b527d7388b4548be5f753cd456251309e)
@@ -47,6 +47,7 @@
         setSearchQuery(searchValue);
         setFoundID(true)
         if(isNaN(Number(searchValue))){
+            // TODO: Improve this to not execute on every keystroke. (Does it need to execute on every keystroke?)
             const filtered = apiData.results
                 .map((pokemon) => {
                 const pokeID = parseInt(pokemon.url.split("/")[6], 10);
@@ -110,9 +111,11 @@
                     component = "form" sx={{p: '2px 2px', display: 'flex', alignItems: "center", width: 250, height: 28}}>
                     <InputBase sx = {{ml : 1, flex: 1}} placeholder='Give pokémon id or name' inputProps={{'aria-label': 'give pokemon name or id', style: {fontSize: 13}}} value={searchItem} onChange={handleSearchChange} onKeyDown={handleKeyPress}></InputBase>
                     <Divider sx = {{ height : 20, m: 0.5 }} orientation="vertical"/>
-                    
+
+
+                   {/* TODO: Untangle this, only use a link or a button, not both */}
                    <Link to = {foundPokemonID ? `/PokeInfo/${foundPokemonID}` : "#"} state = {{id: Number(foundPokemonID), name: foundPokeName, sprite: spriteDataMap.get(Number(foundPokemonID))?.front_sprite as string, sprite_back: spriteDataMap.get(Number(foundPokemonID))?.back_sprite as string}}>
-                                        <IconButton type="button" sx = {{p: '8px'}} aria-label="search" onClick={handleSearch} disabled={!isFoundID}>
+                                        <IconButton type="button" sx = {{p: '8px'}} aria-label="search" onClick={handleSearch} disabled={!isFoundID /* singleMatchId !== undefined */}>
                                             <SearchIcon/>
                                         </IconButton>
                     </Link>
